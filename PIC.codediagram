{"id":-1,"name":"Onboarding diagram","userId":-1,"createdAt":"","updatedAt":"","content":{"items":[{"uid":"AB_JAeDmjO","position":{"x":140,"y":250},"sizes":{"width":530,"height":888.8125},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Run.py"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"def run_gpu(m, n, X, Y, N, dt, q,\r\n            boundary = None, RENDER = True, DIAGNOSTICS = False, RENDER_FRAME = 1, \r\n            SCREEN_SIZE = (512, 512), DIAGNOSTICS_SIZE = (512, 512), PARTICLE_COLOR = 0x00ff00, solver = 'inverse', DIAG_TYPE = 'line', bins = 64):\r\n    \r\n    if boundary != None:\r\n        print('creating boundary array...')\r\n        bound = Solvers.boundary_array(boundary, gridsize)\r\n        #print(bound)\r\n\r\n    if solver == 'inverse':\r\n        print('creating Laplacian...')\r\n        Lap = Solvers.Laplacian(m, n)\r\n        if boundary != None:\r\n            print('applying boundary conditions...')\r\n            Solvers.boundary_conditions_left_gpu(Lap, bound)\r\n        print('creating inverse Laplacian...')\n        Lap = cp.linalg.inv(Lap)\n     \n    while RUN:\r\n\r\n        if RENDER:\r\n            framecounter += 1\r\n            events = sdl2.ext.get_events()\r\n            for event in events:\r\n                print(event.type)\r\n                if event.type == 256:#sdl2.SDL_WINDOWEVENT_CLOSE:\r\n                    RUN = False\r\n                    break\r\n\r\n        start_time = time.time()\r\n\r\n        # UPDATE\r\n        Update.push_gpu(R, V, E, Q, M, gridsize, dt)\r\n        Update.update_density_gpu(R, rho, X, Y, gridsize, Q, q)\r\n        if boundary != None:\r\n            rho[bound[0]] = bound[1]\n        phi[:] = cp.dot(Lap, -rho)\n        Update.updateE_gpu(E, phi, X, Y, gridsize)\n\n    return 0"}]}]},"nodeType":"block"},{"uid":"aLr31ILUsP","position":{"x":210,"y":-280},"sizes":{"width":399.96875,"height":328.8125},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"PIC.py"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"if __name__ == \"__main__\":\r\n    if CPU:\r\n        sys.exit(Run.run_cpu(m,n,X,Y,N,dt,q, RENDER=True))\r\n    elif GPU:\r\n        sys.exit(Run.run_gpu(m,n,X,Y,N,dt,q,\r\n                            boundary=None, RENDER=True, RENDER_FRAME=1, DIAGNOSTICS=True, solver='inverse', DIAG_TYPE='line', bins=64))\r\n    else:\r\n        print(\"Please select CPU or GPU\")"}]}]},"nodeType":"block"},{"uid":"M05MMXjIwl","position":{"x":220,"y":1240},"sizes":{"width":399.96875,"height":108.3125},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Update.py"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"EKneNdmIi9","position":{"x":350,"y":1440},"sizes":{"width":399.96875,"height":451.3125},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Update.py"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"def push_gpu(R, V, E, Q, M, gridsize:tuple, dt):\r\n    '''updates positions and velocities using GPU with cupy'''\r\n    R0 = cp.copy(R)\r\n    V0 = cp.copy(V)\r\n    m, n = gridsize\r\n    i = cp.arange(len(R[0]), dtype=cp.int32)\r\n    j = (R[0, i] * m).round().astype(cp.int32)\r\n    k = (R[1, i] * n).round().astype(cp.int32)\r\n    idx = k * m + j\r\n    \r\n    R[:, i] = R[:, i] + (V[:2, i] + V0[:2, i]) * dt * 0.5\r\n    V[0, i] += cp.take(E[0], idx) * dt * Q[i] * M[i]\r\n    V[1, i] += cp.take(E[1], idx) * dt * Q[i] * M[i]\r\n"}]}]},"nodeType":"block"},{"uid":"8NCuH19bHl","position":{"x":840,"y":1900},"sizes":{"width":399.96875,"height":643.8125},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Update.py"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"def update_density_gpu(R:cp.ndarray, rho:cp.ndarray, X:float, Y:float, gridsize:tuple, q, w = 1):\r\n    m, n = gridsize\r\n    dx = X/m\r\n    dy = Y/n\r\n    dV = dx*dy\r\n    rho.fill(0)\r\n\r\n\r\n    I = (R[0]/X * m)\r\n    J = (R[1]/Y * n)\r\n    i = cp.floor(I).astype(cp.int32)\r\n    j = cp.floor(J).astype(cp.int32)\r\n\r\n    fx0 = ((i+1)*dx - R[0])/dx\r\n    fx1 = (R[0] - i*dx)/dx\r\n    fy0 = ((j+1)*dy - R[1])/dy\r\n    fy1 = (R[1] - j*dy)/dy\r\n\r\n    k1 = j*n + i\r\n    k2 = k1 + 1\r\n    k3 = k1 + n\r\n    k4 = k3 + 1\r\n\r\n    cp.add.at(rho, k1, w*q*fx0*fy0/dV)\r\n    cp.add.at(rho, k2, w*q*fx1*fy0/dV)\r\n    cp.add.at(rho, k3, w*q*fx0*fy1/dV)\r\n    cp.add.at(rho, k4, w*q*fx1*fy1/dV)"}]}]},"nodeType":"block"},{"uid":"Mw5igJIoeF","position":{"x":-140,"y":2060},"sizes":{"width":399.96875,"height":328.8125},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"Update.py"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"def updateE_gpu(E, phi, x, y, gridsize:tuple):\r\n    #print(Ex.shape, Ey.shape, phi.shape)\r\n    ax = cp.reshape(phi, gridsize, order='C')\r\n    dx = x/gridsize[0]\r\n    dy = y/gridsize[1]\r\n    #ay = cp.transpose(ax)\r\n    E[0, :] = -cp.gradient(ax, dx, axis=1).flatten()\r\n    E[1, :] = -cp.gradient(ax, dy, axis=0).flatten()\r\n    E[2, :] = cp.hypot(E[0, :], E[1, :])"}]}]},"nodeType":"block"}],"configs":{"centerX":209.10279720301787,"centerY":241.78612360057775,"zoomLevel":0.37777776673988106},"arrowData":{"arrowsMap":{"arrow-point-bI0wBh3Ufk-bottom-point-PSPLIYKa9J-top":{"to":"point-PSPLIYKa9J-top","from":"point-bI0wBh3Ufk-bottom","label":"Normal Box","direction":"ft","selectable":true},"arrow-point-bI0wBh3Ufk-bottom-point-ytXK_ayIc1-top":{"to":"point-ytXK_ayIc1-top","from":"point-bI0wBh3Ufk-bottom","label":"Code Box","direction":"ft","selectable":true},"arrow-point-hyyRZE3E8u-right-point-6ZopTaEaDZ-left":{"to":"point-6ZopTaEaDZ-left","from":"point-hyyRZE3E8u-right","label":"call","direction":"ft","selectable":true}},"pointsMap":{"point-PSPLIYKa9J-top":{"x":805.9999797489683,"y":60,"id":"point-PSPLIYKa9J-top","direction":"top"},"point-ytXK_ayIc1-top":{"x":205.99999493724206,"y":60,"id":"point-ytXK_ayIc1-top","direction":"top"},"point-6ZopTaEaDZ-left":{"x":220,"y":605.9999898744841,"id":"point-6ZopTaEaDZ-left","direction":"left"},"point-hyyRZE3E8u-right":{"x":100,"y":606,"id":"point-hyyRZE3E8u-right","direction":"right"},"point-bI0wBh3Ufk-bottom":{"x":515.9999797489683,"y":-40,"id":"point-bI0wBh3Ufk-bottom","direction":"bottom"}},"edgesMap":{"edge-aLr31ILUsP-aLr31ILUsP-bottom-AB_JAeDmjO-AB_JAeDmjO-top":{"uid":"edge-aLr31ILUsP-aLr31ILUsP-bottom-AB_JAeDmjO-AB_JAeDmjO-top","fromNodeId":"aLr31ILUsP","fromHandleId":"aLr31ILUsP-bottom","toNodeId":"AB_JAeDmjO","toHandleId":"AB_JAeDmjO-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-AB_JAeDmjO-AB_JAeDmjO-bottom-M05MMXjIwl-M05MMXjIwl-top":{"uid":"edge-AB_JAeDmjO-AB_JAeDmjO-bottom-M05MMXjIwl-M05MMXjIwl-top","fromNodeId":"AB_JAeDmjO","fromHandleId":"AB_JAeDmjO-bottom","toNodeId":"M05MMXjIwl","toHandleId":"M05MMXjIwl-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-M05MMXjIwl-M05MMXjIwl-bottom-EKneNdmIi9-EKneNdmIi9-top":{"uid":"edge-M05MMXjIwl-M05MMXjIwl-bottom-EKneNdmIi9-EKneNdmIi9-top","fromNodeId":"M05MMXjIwl","fromHandleId":"M05MMXjIwl-bottom","toNodeId":"EKneNdmIi9","toHandleId":"EKneNdmIi9-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-EKneNdmIi9-EKneNdmIi9-right-8NCuH19bHl-8NCuH19bHl-left":{"uid":"edge-EKneNdmIi9-EKneNdmIi9-right-8NCuH19bHl-8NCuH19bHl-left","fromNodeId":"EKneNdmIi9","fromHandleId":"EKneNdmIi9-right","toNodeId":"8NCuH19bHl","toHandleId":"8NCuH19bHl-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-8NCuH19bHl-8NCuH19bHl-bottom-Mw5igJIoeF-Mw5igJIoeF-right":{"uid":"edge-8NCuH19bHl-8NCuH19bHl-bottom-Mw5igJIoeF-Mw5igJIoeF-right","fromNodeId":"8NCuH19bHl","fromHandleId":"8NCuH19bHl-bottom","toNodeId":"Mw5igJIoeF","toHandleId":"Mw5igJIoeF-right","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-Mw5igJIoeF-Mw5igJIoeF-left-AB_JAeDmjO-AB_JAeDmjO-left":{"uid":"edge-Mw5igJIoeF-Mw5igJIoeF-left-AB_JAeDmjO-AB_JAeDmjO-left","fromNodeId":"Mw5igJIoeF","fromHandleId":"Mw5igJIoeF-left","toNodeId":"AB_JAeDmjO","toHandleId":"AB_JAeDmjO-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}}}}}}